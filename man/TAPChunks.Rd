% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TAPChunks.R
\docType{package}
\name{TAPChunks}
\alias{TAPChunks}
\alias{TAPChunks-package}
\title{TAPChunks: A package for curating and manipulating chunks of Telemetry data}
\description{
The TAPChunks package provides these categories of important functions:
 \enumerate{
  \item Understanding what is available on the data lake
  \item Controlling your local cache
  \item Weighting and cleaning data
  \item Manipulating data
  \item Reporting data
  \item Internal utilities
  \item Example data files
}
}
\section{1. Understanding what is available on the data lake}{

For the current release the TAPChunks package works with a series of data
files that are loaded by an internal CMR process to our Azure Data Lake.  This uses
big data technologies to give us a highly scalable storage area with telemetry data. \cr\cr
\strong{Functions:} \cr
See what is in the Data Lake:      \code{\link{ADLDirectory}} \cr
To copy chunks from the lake to the cache: \code{\link{ADLReadChunk}} \cr
To copy files  from the lake to the cache: \code{\link{ADLRead}} \cr
To read files from Azure Blob Storage: \code{\link{ABSRead}} \cr
To save files in the Data Lake: \code{\link{ADLSave}} \cr
}

\section{2. Controlling your local cache}{

All data must be copied from the data lake to a local environment called the cache.  This is
a directory that the TAPChunks package will establish on the user's PC where copies of the
chunks can be stored.\cr\cr
\strong{Functions:} \cr
To get the path of the local cache: \code{\link{CachePath}} \cr
To delete files from your cache: \code{\link{DeleteCache}} \cr
To list files that are in your cache: \code{\link{CacheDirectory}} \cr
To refresh data that has been superseded on the lake: \code{\link{RefreshCache}} \cr
To see if data has been superseded on the lake: \code{\link{ShowCacheStatus}} \cr
To copy chunks from the lake to the cache: \code{\link{ADLRead}}
}

\section{3. Weighting and cleaning data}{

The data chunks that we receive from Spiceworks are stored in a raw format that is completely
faithful to the original data.  This means that the chunks may have unclean data and the data
is not weighted.  Because of this the TAPChunks package offers some simple functions to help
the user perform these tasks.\cr\cr
\strong{Functions:} \cr
To keep only the clean data in a chunk: \code{\link{CleanChunk}} \cr
To review the weight calculation: \code{\link{WeightCalculation}} \cr
To apply weights to a chunk:  \cr
}

\section{4. Manipulating data}{

The functions in this section are all designed to allow for the simple manipulation
and summarization of data chunks. \cr\cr
\strong{Functions:} \cr
To generate weighted and unweighted org counts:  \cr
To generate weighted and unweighted device counts:  \cr
To generate weighted and unweighted install counts:  \cr
To keep only the data from orgs which exist in all time periods:  \cr
To filter items from data: \code{\link{FilterChunk}} \cr
To join chunks keeping all data: \code{\link{JoinChunks}} \cr
To join chunks keeping only the data for orgs in the intersection:  \cr
}

\section{5. Reporting data}{

The functions in this section allow the user to deliver cubes and reports more easily. \cr\cr
\strong{Functions:} \cr
}

\section{6. Internal utilities}{

These are functions that are typically only used internally within the TAPChunks
package.  \cr\cr
\strong{Functions:} \cr
To check that the system has internet access: \code{\link{TestNet}} \cr
To check the latest demographics data: \code{\link{CheckDemogDB}} \cr
To load the latest demographics data: \code{\link{LoadDemogDB}} \cr
To open a connection to the data lake: \code{\link{ConnectToADL}} \cr
To generate a list of Spiceworks timestamps: \code{\link{TimeStamps}} \cr
To check that data is a valid chunk: \code{\link{ValidateChunk}} \cr
To get the Path on the data lake to a source: \code{\link{ADLPath}} \cr
To get the file prefix used to distinguish a source: \code{\link{ADLPrefix}} \cr
}

\section{7. Example data files}{

In order to help users to run the examples given in the help pages there
are example data files provided. These can be used for experimentation, training and
as test data to ensure scripts are working. They are exact copies of Spiceworks data
but are limited to only 500 records each.  \cr\cr
\strong{Data:} \cr
\tabular{ll}{
Email       \tab \code{\link{TestEmailChunk}}  \cr
Client      \tab \code{\link{TestClientChunk}} \cr
Networkhv   \tab \code{\link{TestNetworkhvChunk}}   \cr
Networkos   \tab \code{\link{TestNetworkosChunk}}   \cr
ServerRoles \tab \code{\link{TestServerRolesChunk}} \cr
WorkloadDB  \tab \code{\link{TestWorkloadDBChunk}}  \cr
WorkloadEco \tab \code{\link{TestWorkloadEcoChunk}} \cr
WorkloadHW  \tab \code{\link{TestWorkloadHWChunk}} \cr
WorkloadN   \tab \code{\link{TestWorkloadNChunk}} \cr
WorkloadVID \tab \code{\link{TestWorkloadVIDChunk}} \cr
WorkloadWL  \tab \code{\link{TestWorkloadWLChunk}} \cr
}
}

